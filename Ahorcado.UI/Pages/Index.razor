@page "/"
@using Ahorcado.Entidades

<PageTitle>Index</PageTitle>

<h1>Ahorcado</h1>
<br />
<br />
@if (loading == false)
{
    @if (dificultad == 0)
    {
        <br />
        <p>Seleccione una dificultad</p>
        <br />
        <br />
        <button id="btn_elegir_facil" type="button" @onclick="(() => SeleccionarDificultad(1))" class="btn btn-success">Facil</button>
        <button id="btn_elegir_medio" type="button" @onclick="(() => SeleccionarDificultad(2))" class="btn btn-success">Intermedio</button>
        <button id="btn_elegir_dificil" type="button" @onclick="(() => SeleccionarDificultad(3))" class="btn btn-success">Dificil</button>
    }
    else if (juego is not null)
    {
        <input type="hidden" value="@palabra_correcta" id="txt_palabra_correcta" />
        <p>Intentos disponibles : @juego.IntentosDisponibles.ToString()</p>
        <br />
        @if (juego.CheckResultado() == Juego.Status.Victoria)
        {
            <alert id="alert" value="ganaste" class="alert alert-success">Ganaste</alert>
        }
        @if (juego.CheckResultado() == Juego.Status.EnProgreso)
        {

            <input id="txt_letra_a_probar" style="text-transform: uppercase;" maxlength="1" @bind-value="letra_probar" />

            <br />
            <br />
            <button id="btn_probar_letra" class="btn btn-primary" @onclick="ProbarLetra">Probar letra</button>
        }
        @if (juego.CheckResultado() == Juego.Status.Derrota)
        {
            <alert id="alert" value="perdiste" class="alert alert-danger">Perdiste</alert>
        }
        <br />
        <br />
        <table>
            <tr>
                @foreach (char letra in juego.PalabraAdivinada)
                {
                    <td>@letra </td>
                }
            </tr>
        </table>

    }
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public Usuario? usuario { get; set; }

    int dificultad = 0;
    string palabra_correcta = "";
    private string letra_probar = "";
    bool loading = false;
    List<char> letras = new();

    Ahorcado.Logica.Juego? juego;
    private void ProbarLetra()
    {
        if (letra_probar.Length == 1)
        {
            juego?.ProbarLetra(char.Parse(letra_probar.ToUpper()));
        }
        letra_probar = "";
        StateHasChanged();
    }

    private async void SeleccionarDificultad(int dif_n)
    {
        loading = true;
        StateHasChanged();
        await Task.Delay(300);
        Juego.Difficulty diff = new();
        dificultad = dif_n;
        switch (dif_n)
        {
            case 1:
                diff = Juego.Difficulty.Facil;
                break;
            case 2:
                diff = Juego.Difficulty.Medio;
                break;
            case 3:
                diff = Juego.Difficulty.Dificil;
                break;
        }
        if (usuario is not null)
        {
            if (diff == Juego.Difficulty.Facil)
            {
                juego = new("ARBOL");
            }
            else
            {
                juego = new(diff, usuario.ID);
            }
            loading = false;
            StateHasChanged();
        }
    }
}

